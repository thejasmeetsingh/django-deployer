# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from pb.proto import deployment_plan_pb2 as pb_dot_proto_dot_deployment__plan__pb2


class DeploymentPlanStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetDeploymentPlans = channel.unary_stream(
            '/DeploymentPlan/GetDeploymentPlans',
            request_serializer=pb_dot_proto_dot_deployment__plan__pb2.DeploymentPlanRequest.SerializeToString,
            response_deserializer=pb_dot_proto_dot_deployment__plan__pb2.DeploymentPlanResponse.FromString,
        )


class DeploymentPlanServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetDeploymentPlans(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DeploymentPlanServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'GetDeploymentPlans': grpc.unary_stream_rpc_method_handler(
            servicer.GetDeploymentPlans,
            request_deserializer=pb_dot_proto_dot_deployment__plan__pb2.DeploymentPlanRequest.FromString,
            response_serializer=pb_dot_proto_dot_deployment__plan__pb2.DeploymentPlanResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'DeploymentPlan', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))

 # This class is part of an EXPERIMENTAL API.


class DeploymentPlan(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetDeploymentPlans(request,
                           target,
                           options=(),
                           channel_credentials=None,
                           call_credentials=None,
                           insecure=False,
                           compression=None,
                           wait_for_ready=None,
                           timeout=None,
                           metadata=None):
        return grpc.experimental.unary_stream(request, target, '/DeploymentPlan/GetDeploymentPlans',
                                              pb_dot_proto_dot_deployment__plan__pb2.DeploymentPlanRequest.SerializeToString,
                                              pb_dot_proto_dot_deployment__plan__pb2.DeploymentPlanResponse.FromString,
                                              options, channel_credentials,
                                              insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
